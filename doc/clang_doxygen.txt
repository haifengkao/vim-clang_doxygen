*clang_doxygen.txt*	For Vim version 7.3.	Last change: 2013 Jan 24


	    CLANG DOXYGEN PLUGIN MANUAL    by Sven Strothoff~


Help on clang doxygen plugin				*clang_doxygen*

1. Introduction			|clang_doxygen-introduction|
2. Requirements			|clang_doxygen-requirements|
3. Usage			|clang_doxygen-usage|
4. Configuration		|clang_doxygen-configuration|
5. Caveats			|clang_doxygen-caveats|
6. Acknowledgements		|clang_doxygen-acknowledgements|
7. License			|clang_doxygen-license|

==============================================================================
1. Introduction					*clang_doxygen-introduction*

The clang doxygen plugin creates Doxygen comments for C/C++ code.

Optionally clang doxygen can generate placeholders and trigger a snippet
plugin, so that you can quickly enter your documentaion.

Why another Doxygen plugin?~

While I was looking for a vim plugin to help me document my C++ source code I
looked at the several plugins that are available.  All had some restrictions
or shortcomings, so that I was not really happy with the available plugins.
Also none of the plugins seemed to be actively maintained, so there was little
hope for improvement.
At the same time I was testing several plugins for inserting code snippets.
Then a crazy idea was born.  What if it was possibly to create a /dynamic/
snippet to comfortably enter the documentation into the Doxygen comment?
After a few hacks and a proof-of-concept implementation this plugin was born.

Why does this plugin depend on libClang?~

As correctly parsing C++ is very hard, one of the reasons why the other
Doxygen plugins fail in some cases, the work is left to the professionals of
the Clang development team, see |clang_doxygen-requirements|.

==============================================================================
2. Requirements					*clang_doxygen-requirements*

The C interface to the Clang compiler (libClang) is used to parse the source
code and extract information like parameter names and return type.  For this
plugin libClang version 3.0 or greater must be installed on the system.
This plugin uses the Python bindings for accessing libClang, so make sure that
your version of Vim was compiled with Python support. If |:version| includes
|+python| you are good to go.

To generate placeholders and use a snippet plugin when generating Doxygen
comments, one of the supported snippet plugins has to be installed, see
|g:clang_doxygen_snippet_plugin|.

==============================================================================
3. Usage					*clang_doxygen-usage*

							*GenerateDoxygen*
:GenerateDoxygen	Generate Doxygen comment for the declaration at the
			current cursor position.  If the cursor is placed in
			leading whitespace a declaration a declaration will be
			searched to the right on the same line.

==============================================================================
4. Configuration				*clang_doxygen-configuration*

					*'g:clang_doxygen_clang_args'*
'g:clang_doxygen_clang_args'	list (default: [])
				global
	List of arguments that is passed to libClang.  Nearly all clang
	command line args are accepted (for a full list see libClang
	documentation), however as only a single source file is parsed for
	generating Doxygen comments most of then are not necessary.  A useful
	argument might be the selection of the C/C++ standard used.
	Example: For C++11 code use: >
		let g:clang_doxygen_clang_args = ["-std=c++11"]
<
					*'g:clang_doxygen_snippet_plugin'*
'g:clang_doxygen_snippet_plugin'	string (default: "none")
					global
	Select the snippet plugin to use when inserting Doxygen comments.  Look
	into autoload/clang_doxygen_snippets to find out which snippet plugins
	are supported.
	The default setting "none" just inserts the doxygen comment without
	placeholders and positions the cursor after the brief tag.
	Example: To use UltiSnips, defined in
	autoload/clang_doxygen_snippets/ultisnips.vim: >
		let g:clang_doxygen_snippet_plugin = "ultisnips"
<
	Note that adding support for your preferred snippet plugin should be
	pretty straightforward. The documentation string generated by clang
	doxygen uses the UltiSnips syntax, so you might have to transform it
	before passing it to the snippet plugin of your choice. Look at the
	existing scripts to get you started.


Options affecting comment style~

					*'g:clang_doxygen_comment_style'*
'g:clang_doxygen_comment_style'		string (default: "c++")
					global
	Set the type of comments that are used by default.  Currently "c++"
	and "c" are supported.
	This only sets the default comment style used by clang doxygen if you
	do not want to customize everything.  If you don't like the default
	styles simply create your custom configuration using the other
	options.
	Example: Default c++ style: >
		/// \brief Foo
		///
		/// Bar.
<
	Example: Default c style: >
		/**
		  * \brief Foo
		  *
		  * Bar.
		  */
<
	Note: 'g:clang_doxygen_comment_style' sets the following options:
	Option                           | c style | c++ style
	-------------------------------------------------------
	'g:clang_doxygen_use_block'      | 1       | 0
	'g:clang_doxygen_block_start'    | "/** "  | "/// "
	'g:clang_doxygen_comment_middle' | "  * "  | "/// "
	'g:clang_doxygen_block_end'      | "  */"  | "/// "

					*'g:clang_doxygen_use_block'*
'g:clang_doxygen_use_block'		integer (default: 0 or 1)
					global
	Tell clang doxygen if you want block style comments, i.e. c style, or
	not, i.e. c++ style.  A value of 1 means use block comments, a value
	of 0 disables them.
	The default value depends on the value of
	'g:clang_doxygen_comment_style'.  If set to "c++" block comments will
	be diabled by default, if set to "c" they will be enabled.
	See also 'g:clang_doxygen_block_no_newline'.
	Example: Comment contruction in block mode: >
		[block_start]
		[comment_middle] ...
		...
		[block_end]
<
	Example: Comment construction in non-block mode: >
		[comment_middle] ...
		...
<
	Note: C style comments will only work in block mode!

					*'g:clang_doxygen_block_no_newline'*
'g:clang_doxygen_block_no_newline'	integer (default: 0)
					global
	If you don't want a newline after the start of a block comment set
	this option to 1.  This option has no effect if
	'g:clang_doxygen_use_block' is set to 0.
	Example: No newline after block comment start: >
		/** \brief Foo
		  * 
		  * Bar.
		  */
<
	Note: The block comment end is always on a new line.

					*'g:clang_doxygen_comment_middle'*
'g:clang_doxygen_comment_middle'	string (default: "  * " or "/// ")
					global
	Set the string used in the middle of block comments and for each line
	in non-block comments.

	Note: The default value depends on the value of
	'g:clang_doxygen_comment_style'.

					*'g:clang_doxygen_block_start'*
'g:clang_doxygen_block_start'		string (default: "/** " or "/// ")
					global
	Set the string used to start a new block comment.

	Note: The default value depends on the value of
	'g:clang_doxygen_comment_style'.

					*'g:clang_doxygen_block_end'*
'g:clang_doxygen_block_end'		string (default: "  */" or "/// ")
					global
	Set the string used to end a block comment.

	Note: The default value depends on the value of
	'g:clang_doxygen_comment_style'.


Options for customising Doxygen tags~

					*'g:clang_doxygen_tag_brief'*
'g:clang_doxygen_tag_brief'		string (default: "\\brief ")
					global
	The string used for the brief part of the comment.

					*'g:clang_doxygen_tag_param'*
'g:clang_doxygen_tag_param'		string (default: "\\param ")
					global
	The string used for the param part of the comment.

					*'g:clang_doxygen_tag_return'*
'g:clang_doxygen_tag_return'		string (default: "\\return ")
					global
	The string used for the return part of the comment.

==============================================================================
5. Caveats					*clang_doxygen-caveats*

The libClang Python bindings of the Clang project are included in this plugins
distribution.  The included Python module should be preferred over versions
present on the users' system.  However there might be other plugins that also
include the Python bindings in their distribution.  The version of the module
that is loaded by Vim then depends on the order in which the plugins are
loaded. As long as the loaded version of the module includes all the
functionality needed by clang Doxygen you should be fine.  However, if other
plugins depend on a newer version of the Python module this might cause a
problem.
The only plugin known by the author that includes the libClang Python bindings
is clang complete (http://www.vim.org/scripts/script.php?script_id=3302) by
Xavier Deguillard.  Version 1.8 of clang complete plays along nicely with
clang doxygen.

==============================================================================
6. Acknowledgements			*clang_doxygen-acknowledgements*

This plugin was heavily inspired by:
* DoxygenToolkit.vim	by Mathias Lorente
  http://www.vim.org/scripts/script.php?script_id=987
* clang complete		by Xavier Deguillard
  http://www.vim.org/scripts/script.php?script_id=3302

The author would also like to thank the Clang development team and Bram for
making this awesome editor!

==============================================================================
7. License					*clang_doxygen-license*

Copyright (c) 2013, Sven Strothoff
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Sven Strothoff nor the names of contributors to
      this software may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL SVEN STROTHOFF BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Note: This license does not cover the files that come from the LLVM project,
namely, cindex.py, enumerations.py and __init__.py, which are covered by the
LLVM license.

 vim:tw=78:ts=8:sw=8:noet:ft=help:norl:
